---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wakfu.
--- DateTime: 2020/5/8 10:19
---
-- test_module.lua 文件-- module 模块为上文提到到
httpClient = require("mod/module")
require("mod.tableMod")
require("mod.util")
json = require("mod.json")

--********************************test*******************************************
--httpClient.Test()
--tableMod.iterate()
tableMod.promise()

--********************************数组截取*******************************************
--tabs = { 1, 2, 3, 4, 5, 6 }
--print(table.concat(tableMod.subTable(tabs, 2, 4), ","))
--Rx  .Observable.fromRange(1, 8):filter(
--ifn = "work.network1"
--local radio, ifnidx = ifn:match("^(%w+)%.network(%d+)$")
--print(radio, ifnidx)

--        function(x)
--            return x % 2 == 0
--        end
--)   :concat(Rx.Observable.of('who do we appreciate')):map(function(value)
--    return value .. '!'
--end):subscribe(print)

--tableMod.promise1()

--********************************面向对象*******************************************

function metatableTest()
    other = { foo = 3 }
    t = setmetatable({}, { __index = other })
    print(t.foo)
    print(t.bar)
end

function testObject()
    Request = class()
    function Request.init(self, sourcein, sinkerr)
        self.input = sourcein
        self.error = sinkerr
    end

    local r = Request("aa", "bb")

    print(r.input)
end
--testObject()
--metatableTest()

--status, err = pcall(testObject)
--print(status)
--print("错误信息", err)

--********************************协程*******************************************
local co = coroutine.create(
        function()
            print("*1*", coroutine.running())
            a = 1
            while a < 100 do
                a = a + 1;
            end
        end)

print("*2*", co)
if co then
    print("*3*", "aaa")
end

print("*4*", coroutine.running())
if coroutine.running() then
    print("*5*", "bbb")
end

coroutine.resume(co)
print("*6*", coroutine.running())

--********************************ini读取*******************************************
function test3()
    ini = require 'mod.ini'
    inifile = require 'mod.inifile'

    settings1 = ini.parse_file("app.ini")
    settings3 = inifile.parse("app.ini")

    print("settings1类型：", type(settings1))

    print(json.encode(settings1))
    print(json.encode(settings3))
end
--test3()

--********************************字符串-函数 互转*******************************************
function test4()
    local custom_func = function()
        print("nihao")
    end
    local func_content = string.dump(custom_func)

    local myfunc = loadstring(func_content)
    myfunc()
end
--********************************不确定参数*******************************************
function test2()
    function set(...)
        if select('#', ...) == 0 then
            print("0**", select('#', ...))
        else
            option, li = select(1, ...)
            maps = { select(1, ...) }
            --for i = 1, select('#', ...) do
            --    print(select(i, ...))
            --end
            --for i, v in ipairs({ ... }) do
            --    print(v)
            --end

            print(table.concat(maps, ","))
        end
    end
    set("花", "里", "胡", "哨")
end

--********************************属性添加*******************************************
function test1()
    rv = {}
    section1 = { user = "name", pass = 123456 }
    section2 = { user = "name", pass = 123456 }
    section3 = { user = "name", pass = 123456 }
    table.insert(rv, section1)
    table.insert(rv, section2)
    table.insert(rv, section3)

    local sections = { }
    local index = 1
    for _, section in ipairs(rv) do
        section[".index"] = section[".index"] or index
        sections[index] = section
        index = index + 1
    end
    print(json.encode(rv))
    print(json.encode(sections))
end