---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by wakfu.
--- DateTime: 2020/8/1 9:21
---

--__index 元方法 table
function func1()
    Person = setmetatable({}, { __index = { count = 1 } })
    Person.count = Person.count + 1
    print(Person.count)
    Person.count = Person.count + 1
    print(Person.count)
end

--__index 元方法 function
function func2()
    local metatable = { key = 1 }
    function metatable:get()
        print(self.key)
        return "metatable.get()"
    end

    mytable = setmetatable({ key1 = "value1" }, {
        __index = metatable
    })
    print(metatable:get())
    print(mytable.key1, mytable:get())
end

--func2()


--__newindex 元方法
function func3()
    mymetatable = { newkey = "新3" }
    mytable = setmetatable({ key1 = "value1" }, { __newindex = mymetatable })

    print(mytable.key1)

    mytable.newkey = "新值2"
    print(mytable.newkey, mymetatable.newkey)

    mytable.key1 = "新值1"
    print(mytable.key1, mymetatable.key1)

    print("******************************************")
    mytable = setmetatable({ key1 = "value1" }, {
        __newindex = function(mytable, key, value)

            rawset(mytable, key, "\"" .. value .. "\"")

        end
    })
    mytable.key1 = "new value"
    mytable.key2 = 4

    print(mytable.key1, mytable.key2)
end

--func3()

function func4()
    -- 两表相加操作
    mytable = setmetatable({ 1, 2, 7, ke = 'sd' }, {
        __add = function(mytable, newtable)
            for i = 1, #newtable do
                table.insert(mytable, #mytable + 1, newtable[i])
            end
            return mytable
        end
    })

    secondtable = { 4, 5, 6, 5 }

    mytable = mytable + secondtable
    for k, v in ipairs(mytable) do
        print(k, v)
    end
end
--func4()

function func5()
    -- 定义元方法__call
    mytable = setmetatable({ 200 }, {
        __call = function(mytable, ...)

            local table = { ... }
            local count = 0
            for _, v in ipairs(table) do
                count = count + v
            end
            return count + mytable[1]
        end
    })
    print(mytable(10, 20))

end
--func5()

function funcObject()
    -- 元类
    Rectangle = { area = 0, length = 0, breadth = 0 }
    -- 派生类的方法 new
    function Rectangle:new (o, length, breadth)
        o = o or {}
        setmetatable(o, self)
        self.__index = self

        o.length = length or 0
        o.breadth = breadth or 0
        o.area = length * breadth;
        return o
    end

    -- 派生类的方法 printArea
    function Rectangle:printArea ()
        print(self.name .. "的矩形面积为：" .. self.area .. "㎡")
    end

    r1 = Rectangle:new({ name = "o1" }, 10, 20)
    r2 = Rectangle:new({ name = "o2" }, 100, 200)

    print(r1.length, r1.name)
    print(r2.length, r2.name)

    r1:printArea()
    r2:printArea()
end
--funcObject()

function funcObject1()
    ormDb = require("object.OrmDb")
    local db1 = ormDb:new({ tag = "db1" })
    db1:rows()
    --local db2 = ormDb:new({ tag = "db2" })
    --db2:rows()
end

funcObject1()